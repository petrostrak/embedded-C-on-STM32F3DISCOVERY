
led_roulette.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000026c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000400  08000408  00010408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000400  08000400  00010408  2**0
                  CONTENTS
  4 .ARM          00000000  08000400  08000400  00010408  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000400  08000408  00010408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000400  08000400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000404  08000404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010408  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010408  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a18  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001cd  00000000  00000000  00010e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000313  00000000  00000000  0001101d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000068  00000000  00000000  00011330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000000d0  00000000  00000000  00011398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000f81  00000000  00000000  00011468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000854  00000000  00000000  000123e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00003eb9  00000000  00000000  00012c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00016af6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000000a0  00000000  00000000  00016b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003e8 	.word	0x080003e8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003e8 	.word	0x080003e8

080001d4 <main>:
GPIOx_ODR_t volatile *const pGPIOEoutput = GPIOE_OUTPUT;
GPIOx_MODER_t volatile *const pGPIOAmode = GPIOA_MODE_BASE_ADDR;
GPIOx_IDR_t const volatile *const pGPIOAinput = GPIOA_INPUT; // we can use const volatile in read only memory addresses

int main(void)
{
 80001d4:	b530      	push	{r4, r5, lr}
	// Enable the clock for GPIOE peripheral in the AHBENR
	pRCCE->IOPEEN = STATE_HIGH;
 80001d6:	4b5b      	ldr	r3, [pc, #364]	; (8000344 <main+0x170>)

	// Enable the clock for GPIOA peripheral in the AHBENR
	pRCCE->IOPAEN = STATE_HIGH; // SET the 21st bit position

	// Configure the mode of the IO pins as output.
	pGPIOEmode->MODER_8 	= STATE_HIGH; // set the 8th-15th pin mode to 01 general purpose output mode)
 80001d8:	495b      	ldr	r1, [pc, #364]	; (8000348 <main+0x174>)
	pRCCE->IOPEEN = STATE_HIGH;
 80001da:	695a      	ldr	r2, [r3, #20]
 80001dc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80001e0:	615a      	str	r2, [r3, #20]
	pRCCE->IOPAEN = STATE_HIGH; // SET the 21st bit position
 80001e2:	695a      	ldr	r2, [r3, #20]
 80001e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80001e8:	615a      	str	r2, [r3, #20]
	pGPIOEmode->MODER_8 	= STATE_HIGH; // set the 8th-15th pin mode to 01 general purpose output mode)
 80001ea:	680b      	ldr	r3, [r1, #0]
 80001ec:	f04f 0c01 	mov.w	ip, #1
 80001f0:	f36c 4311 	bfi	r3, ip, #16, #2
 80001f4:	600b      	str	r3, [r1, #0]
	pGPIOEmode->MODER_9 	= STATE_HIGH;
 80001f6:	680b      	ldr	r3, [r1, #0]
 80001f8:	f36c 4393 	bfi	r3, ip, #18, #2
 80001fc:	600b      	str	r3, [r1, #0]
	pGPIOEmode->MODER_10	= STATE_HIGH;
 80001fe:	680b      	ldr	r3, [r1, #0]
 8000200:	f36c 5315 	bfi	r3, ip, #20, #2
 8000204:	600b      	str	r3, [r1, #0]
	pGPIOEmode->MODER_11	= STATE_HIGH;
 8000206:	680b      	ldr	r3, [r1, #0]
 8000208:	f36c 5397 	bfi	r3, ip, #22, #2
 800020c:	600b      	str	r3, [r1, #0]
	pGPIOEmode->MODER_12	= STATE_HIGH;
 800020e:	680b      	ldr	r3, [r1, #0]
 8000210:	f36c 6319 	bfi	r3, ip, #24, #2
 8000214:	600b      	str	r3, [r1, #0]
	pGPIOEmode->MODER_13	= STATE_HIGH;
 8000216:	680b      	ldr	r3, [r1, #0]
 8000218:	f36c 639b 	bfi	r3, ip, #26, #2
 800021c:	600b      	str	r3, [r1, #0]
	pGPIOEmode->MODER_14	= STATE_HIGH;
 800021e:	680b      	ldr	r3, [r1, #0]
 8000220:	f36c 731d 	bfi	r3, ip, #28, #2
 8000224:	600b      	str	r3, [r1, #0]
	pGPIOEmode->MODER_15	= STATE_HIGH;
 8000226:	680b      	ldr	r3, [r1, #0]

	// Configure the mode of the IO pin PA0 as input
	pGPIOAmode->MODER_0	= STATE_LOW;
 8000228:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
	pGPIOEmode->MODER_15	= STATE_HIGH;
 800022c:	f36c 739f 	bfi	r3, ip, #30, #2
 8000230:	600b      	str	r3, [r1, #0]
	pGPIOAmode->MODER_0	= STATE_LOW;
 8000232:	f8de 3000 	ldr.w	r3, [lr]
 8000236:	f36f 0301 	bfc	r3, #0, #2
}

// delay simulates a human-eye-visible delay
void delay(uint32_t volatile seconds)
{
	seconds *= DELAY;
 800023a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800023e:	f8ce 3000 	str.w	r3, [lr]


	while(1)
	{
		// Read the PA0 status (GPIOA input data register)
		uint32_t PA0Status = pGPIOAinput->IDR0; // Since we only need to read the 1st bit, we zeroed all others
 8000242:	f8de 3010 	ldr.w	r3, [lr, #16]

		if(PA0Status)
 8000246:	f013 0301 	ands.w	r3, r3, #1
 800024a:	d03f      	beq.n	80002cc <main+0xf8>
	for(uint32_t i = 0; i < seconds; i++);
}

void clearPins(GPIOx_ODR_t volatile *led)
{
	led->ODR8  = STATE_LOW;
 800024c:	694b      	ldr	r3, [r1, #20]
 800024e:	f36f 2308 	bfc	r3, #8, #1
 8000252:	614b      	str	r3, [r1, #20]
	led->ODR9  = STATE_LOW;
 8000254:	694b      	ldr	r3, [r1, #20]
 8000256:	f36f 2349 	bfc	r3, #9, #1
 800025a:	614b      	str	r3, [r1, #20]
	led->ODR10 = STATE_LOW;
 800025c:	694b      	ldr	r3, [r1, #20]
 800025e:	f36f 238a 	bfc	r3, #10, #1
 8000262:	614b      	str	r3, [r1, #20]
	led->ODR11 = STATE_LOW;
 8000264:	694b      	ldr	r3, [r1, #20]
 8000266:	f36f 23cb 	bfc	r3, #11, #1
 800026a:	614b      	str	r3, [r1, #20]
	led->ODR12 = STATE_LOW;
 800026c:	694b      	ldr	r3, [r1, #20]
 800026e:	f36f 330c 	bfc	r3, #12, #1
 8000272:	614b      	str	r3, [r1, #20]
	led->ODR13 = STATE_LOW;
 8000274:	694b      	ldr	r3, [r1, #20]
 8000276:	f36f 334d 	bfc	r3, #13, #1
 800027a:	614b      	str	r3, [r1, #20]
	led->ODR14 = STATE_LOW;
 800027c:	694b      	ldr	r3, [r1, #20]
 800027e:	f36f 338e 	bfc	r3, #14, #1
 8000282:	614b      	str	r3, [r1, #20]
	led->ODR15 = STATE_LOW;
 8000284:	694b      	ldr	r3, [r1, #20]
 8000286:	f36f 33cf 	bfc	r3, #15, #1
 800028a:	2008      	movs	r0, #8
 800028c:	614b      	str	r3, [r1, #20]
	*led |= (1 << (i + 8));
 800028e:	1c44      	adds	r4, r0, #1
 8000290:	f004 0307 	and.w	r3, r4, #7
 8000294:	694d      	ldr	r5, [r1, #20]
 8000296:	3308      	adds	r3, #8
 8000298:	fa0c f303 	lsl.w	r3, ip, r3
 800029c:	432b      	orrs	r3, r5
 800029e:	614b      	str	r3, [r1, #20]
	for(uint32_t i = 0; i < seconds; i++);
 80002a0:	2300      	movs	r3, #0
 80002a2:	3301      	adds	r3, #1
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d3fc      	bcc.n	80002a2 <main+0xce>
	*led &= ~(1 << i);
 80002a8:	694b      	ldr	r3, [r1, #20]
 80002aa:	fa0c f000 	lsl.w	r0, ip, r0
 80002ae:	ea23 0000 	bic.w	r0, r3, r0
 80002b2:	6148      	str	r0, [r1, #20]
	for(uint32_t i = 0; i < seconds; i++);
 80002b4:	2300      	movs	r3, #0
 80002b6:	3301      	adds	r3, #1
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d3fc      	bcc.n	80002b6 <main+0xe2>
		{
			clearPins(pGPIOEoutput);
			for(uint8_t current = 8; current < 16; current++)
 80002bc:	2c10      	cmp	r4, #16
 80002be:	4620      	mov	r0, r4
 80002c0:	d1e5      	bne.n	800028e <main+0xba>
		uint32_t PA0Status = pGPIOAinput->IDR0; // Since we only need to read the 1st bit, we zeroed all others
 80002c2:	f8de 3010 	ldr.w	r3, [lr, #16]
		if(PA0Status)
 80002c6:	f013 0301 	ands.w	r3, r3, #1
 80002ca:	d1bf      	bne.n	800024c <main+0x78>
	led->ODR8  = STATE_LOW;
 80002cc:	694c      	ldr	r4, [r1, #20]
 80002ce:	f363 2408 	bfi	r4, r3, #8, #1
 80002d2:	614c      	str	r4, [r1, #20]
	led->ODR9  = STATE_LOW;
 80002d4:	694c      	ldr	r4, [r1, #20]
 80002d6:	f363 2449 	bfi	r4, r3, #9, #1
 80002da:	614c      	str	r4, [r1, #20]
	led->ODR10 = STATE_LOW;
 80002dc:	694c      	ldr	r4, [r1, #20]
 80002de:	f363 248a 	bfi	r4, r3, #10, #1
 80002e2:	614c      	str	r4, [r1, #20]
	led->ODR11 = STATE_LOW;
 80002e4:	694c      	ldr	r4, [r1, #20]
 80002e6:	f363 24cb 	bfi	r4, r3, #11, #1
 80002ea:	614c      	str	r4, [r1, #20]
	led->ODR12 = STATE_LOW;
 80002ec:	694c      	ldr	r4, [r1, #20]
 80002ee:	f363 340c 	bfi	r4, r3, #12, #1
 80002f2:	614c      	str	r4, [r1, #20]
	led->ODR13 = STATE_LOW;
 80002f4:	694c      	ldr	r4, [r1, #20]
 80002f6:	f363 344d 	bfi	r4, r3, #13, #1
 80002fa:	614c      	str	r4, [r1, #20]
	led->ODR14 = STATE_LOW;
 80002fc:	694c      	ldr	r4, [r1, #20]
 80002fe:	f363 348e 	bfi	r4, r3, #14, #1
 8000302:	614c      	str	r4, [r1, #20]
	led->ODR15 = STATE_LOW;
 8000304:	694c      	ldr	r4, [r1, #20]
 8000306:	f363 34cf 	bfi	r4, r3, #15, #1
 800030a:	200e      	movs	r0, #14
 800030c:	614c      	str	r4, [r1, #20]
			}
		} else {
			clearPins(pGPIOEoutput);
			for(uint8_t current = 15; current >= 8; current--)
			{
				uint8_t next = (current - 1) % 8;
 800030e:	f000 0307 	and.w	r3, r0, #7
	*led |= (1 << (i + 8));
 8000312:	694c      	ldr	r4, [r1, #20]
 8000314:	3308      	adds	r3, #8
 8000316:	fa0c f303 	lsl.w	r3, ip, r3
 800031a:	4323      	orrs	r3, r4
 800031c:	614b      	str	r3, [r1, #20]
 800031e:	1c44      	adds	r4, r0, #1
	for(uint32_t i = 0; i < seconds; i++);
 8000320:	2300      	movs	r3, #0
 8000322:	3301      	adds	r3, #1
 8000324:	4293      	cmp	r3, r2
 8000326:	d3fc      	bcc.n	8000322 <main+0x14e>
	*led &= ~(1 << i);
 8000328:	694b      	ldr	r3, [r1, #20]
 800032a:	fa0c f404 	lsl.w	r4, ip, r4
 800032e:	ea23 0304 	bic.w	r3, r3, r4
 8000332:	614b      	str	r3, [r1, #20]
	for(uint32_t i = 0; i < seconds; i++);
 8000334:	2300      	movs	r3, #0
 8000336:	3301      	adds	r3, #1
 8000338:	4293      	cmp	r3, r2
 800033a:	d3fc      	bcc.n	8000336 <main+0x162>
			for(uint8_t current = 15; current >= 8; current--)
 800033c:	3801      	subs	r0, #1
 800033e:	2806      	cmp	r0, #6
 8000340:	d1e5      	bne.n	800030e <main+0x13a>
 8000342:	e77e      	b.n	8000242 <main+0x6e>
 8000344:	40021000 	.word	0x40021000
 8000348:	48001000 	.word	0x48001000

0800034c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800034c:	480d      	ldr	r0, [pc, #52]	; (8000384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000350:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000354:	480c      	ldr	r0, [pc, #48]	; (8000388 <LoopForever+0x6>)
  ldr r1, =_edata
 8000356:	490d      	ldr	r1, [pc, #52]	; (800038c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000358:	4a0d      	ldr	r2, [pc, #52]	; (8000390 <LoopForever+0xe>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800035c:	e002      	b.n	8000364 <LoopCopyDataInit>

0800035e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000362:	3304      	adds	r3, #4

08000364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000368:	d3f9      	bcc.n	800035e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036a:	4a0a      	ldr	r2, [pc, #40]	; (8000394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800036c:	4c0a      	ldr	r4, [pc, #40]	; (8000398 <LoopForever+0x16>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000370:	e001      	b.n	8000376 <LoopFillZerobss>

08000372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000374:	3204      	adds	r2, #4

08000376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000378:	d3fb      	bcc.n	8000372 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037a:	f000 f811 	bl	80003a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037e:	f7ff ff29 	bl	80001d4 <main>

08000382 <LoopForever>:

LoopForever:
  b LoopForever
 8000382:	e7fe      	b.n	8000382 <LoopForever>
  ldr   r0, =_estack
 8000384:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800038c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000390:	08000408 	.word	0x08000408
  ldr r2, =_sbss
 8000394:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000398:	2000001c 	.word	0x2000001c

0800039c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800039c:	e7fe      	b.n	800039c <ADC1_2_IRQHandler>
	...

080003a0 <__libc_init_array>:
 80003a0:	b570      	push	{r4, r5, r6, lr}
 80003a2:	4d0d      	ldr	r5, [pc, #52]	; (80003d8 <__libc_init_array+0x38>)
 80003a4:	4c0d      	ldr	r4, [pc, #52]	; (80003dc <__libc_init_array+0x3c>)
 80003a6:	1b64      	subs	r4, r4, r5
 80003a8:	10a4      	asrs	r4, r4, #2
 80003aa:	2600      	movs	r6, #0
 80003ac:	42a6      	cmp	r6, r4
 80003ae:	d109      	bne.n	80003c4 <__libc_init_array+0x24>
 80003b0:	4d0b      	ldr	r5, [pc, #44]	; (80003e0 <__libc_init_array+0x40>)
 80003b2:	4c0c      	ldr	r4, [pc, #48]	; (80003e4 <__libc_init_array+0x44>)
 80003b4:	f000 f818 	bl	80003e8 <_init>
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	10a4      	asrs	r4, r4, #2
 80003bc:	2600      	movs	r6, #0
 80003be:	42a6      	cmp	r6, r4
 80003c0:	d105      	bne.n	80003ce <__libc_init_array+0x2e>
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c8:	4798      	blx	r3
 80003ca:	3601      	adds	r6, #1
 80003cc:	e7ee      	b.n	80003ac <__libc_init_array+0xc>
 80003ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d2:	4798      	blx	r3
 80003d4:	3601      	adds	r6, #1
 80003d6:	e7f2      	b.n	80003be <__libc_init_array+0x1e>
 80003d8:	08000400 	.word	0x08000400
 80003dc:	08000400 	.word	0x08000400
 80003e0:	08000400 	.word	0x08000400
 80003e4:	08000404 	.word	0x08000404

080003e8 <_init>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr

080003f4 <_fini>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr
